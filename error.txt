2021-09-15 12:23:57,727 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.5 (default, Sep  4 2020, 07:30:14) [GCC 7.3.0]
CUDA available: True
GPU 0: GeForce RTX 3090
CUDA_HOME: /usr/local/cuda
NVCC: Build cuda_11.1.TC455_06.29190527_0
GCC: gcc (GCC) 5.4.0
PyTorch: 1.8.1+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.9.1+cu111
OpenCV: 4.5.1
MMCV: 1.3.9
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMDetection: 2.12.0
MMDetection3D: 0.13.0+879df24
------------------------------------------------------------

INFO:mmdet:Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.5 (default, Sep  4 2020, 07:30:14) [GCC 7.3.0]
CUDA available: True
GPU 0: GeForce RTX 3090
CUDA_HOME: /usr/local/cuda
NVCC: Build cuda_11.1.TC455_06.29190527_0
GCC: gcc (GCC) 5.4.0
PyTorch: 1.8.1+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.9.1+cu111
OpenCV: 4.5.1
MMCV: 1.3.9
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMDetection: 2.12.0
MMDetection3D: 0.13.0+879df24
------------------------------------------------------------

2021-09-15 12:23:58,597 - mmdet - INFO - Distributed training: True
INFO:mmdet:Distributed training: True
2021-09-15 12:23:59,334 - mmdet - INFO - Config:
checkpoint_config = dict(interval=1)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
work_dir = './work_dirs/htc_r50_fpn_painting2'
load_from = 'https://download.openmmlab.com/mmdetection3d/v0.1.0_models/nuimages_semseg/htc_r50_fpn_coco-20e_20e_nuim/htc_r50_fpn_coco-20e_20e_nuim_20201008_211415-d6c60a2c.pth'
resume_from = None
workflow = [('val', 1)]
point_cloud_range = [-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]
class_names = [
    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
]
dataset_type = 'NuScenesDatasetv2'
data_root = 'data/nuscenes/'
input_modality = dict(
    use_lidar=True,
    use_camera=True,
    use_radar=False,
    use_map=False,
    use_external=False)
file_client_args = dict(backend='disk')
train_pipeline = [
    dict(
        type='LoadPointsFromFilev2',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(type='LoadMultiViewImageFromFilesv2'),
    dict(
        type='LoadPointsFromMultiSweepsv2',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
    dict(
        type='Normalize3D',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad3Dv2', size_divisor=32),
    dict(
        type='DefaultFormatBundle3Dv2',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        with_gt=False),
    dict(
        type='Collect3Dv2',
        keys=['points', 'img', 'sweep_points', 'pts_metas'])
]
test_pipeline = [
    dict(
        type='LoadPointsFromFilev2',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(type='LoadMultiViewImageFromFiles'),
    dict(
        type='LoadPointsFromMultiSweepsv2',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(
        type='Normalize3D',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad3D', size_divisor=32),
    dict(
        type='MultiScaleFlipAug3D',
        img_scale=(1333, 800),
        pts_scale_ratio=1,
        flip=False,
        transforms=[
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ],
                with_label=False),
            dict(type='Collect3D', keys=['points', 'img'])
        ])
]
data = dict(
    samples_per_gpu=1,
    workers_per_gpu=4,
    train=dict(
        type='NuScenesDatasetv2',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_train.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFilev2',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(type='LoadMultiViewImageFromFilesv2'),
            dict(
                type='LoadPointsFromMultiSweepsv2',
                sweeps_num=9,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk'),
                pad_empty_sweeps=True,
                remove_close=True),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                type='Normalize3D',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad3Dv2', size_divisor=32),
            dict(
                type='DefaultFormatBundle3Dv2',
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ],
                with_gt=False),
            dict(
                type='Collect3Dv2',
                keys=['points', 'img', 'sweep_points', 'pts_metas'])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=False,
        box_type_3d='LiDAR',
        use_valid_flag=True),
    val=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFilev2',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(type='LoadMultiViewImageFromFiles'),
            dict(
                type='LoadPointsFromMultiSweepsv2',
                sweeps_num=9,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk'),
                pad_empty_sweeps=True,
                remove_close=True),
            dict(
                type='Normalize3D',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad3D', size_divisor=32),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(type='Collect3D', keys=['points', 'img'])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'),
    test=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFilev2',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(type='LoadMultiViewImageFromFiles'),
            dict(
                type='LoadPointsFromMultiSweepsv2',
                sweeps_num=9,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk'),
                pad_empty_sweeps=True,
                remove_close=True),
            dict(
                type='Normalize3D',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad3D', size_divisor=32),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(type='Collect3D', keys=['points', 'img'])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'))
evaluation = dict(
    interval=1,
    pipeline=[
        dict(
            type='LoadPointsFromFile',
            coord_type='LIDAR',
            load_dim=5,
            use_dim=5,
            file_client_args=dict(backend='disk')),
        dict(
            type='LoadPointsFromMultiSweeps',
            sweeps_num=9,
            use_dim=[0, 1, 2, 3, 4],
            file_client_args=dict(backend='disk'),
            pad_empty_sweeps=True,
            remove_close=True),
        dict(
            type='DefaultFormatBundle3D',
            class_names=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            with_label=False),
        dict(type='Collect3D', keys=['points'])
    ])
model = dict(
    type='HybridTaskCascadePainting',
    pretrained='torchvision://resnet50',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch'),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='HybridTaskCascadeRoIHeadPainting',
        interleaved=True,
        mask_info_flow=True,
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
        ],
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_head=[
            dict(
                type='HTCMaskHead',
                with_conv_res=False,
                num_convs=4,
                in_channels=256,
                conv_out_channels=256,
                num_classes=10,
                loss_mask=dict(
                    type='CrossEntropyLoss', use_mask=True, loss_weight=1.0)),
            dict(
                type='HTCMaskHead',
                num_convs=4,
                in_channels=256,
                conv_out_channels=256,
                num_classes=10,
                loss_mask=dict(
                    type='CrossEntropyLoss', use_mask=True, loss_weight=1.0)),
            dict(
                type='HTCMaskHead',
                num_convs=4,
                in_channels=256,
                conv_out_channels=256,
                num_classes=10,
                loss_mask=dict(
                    type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))
        ],
        semantic_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[8]),
        semantic_head=dict(
            type='FusedSemanticHead',
            num_ins=5,
            fusion_level=1,
            num_convs=4,
            in_channels=256,
            conv_out_channels=256,
            num_classes=32,
            ignore_label=0,
            loss_weight=0.2)),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_across_levels=False,
            nms_pre=2000,
            nms_post=2000,
            max_num=2000,
            nms_thr=0.7,
            min_bbox_size=0),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_across_levels=False,
            nms_pre=1000,
            nms_post=1000,
            max_num=1000,
            nms_thr=0.7,
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.1,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
plugin = True
plugin_dir = 'plugin/pointpainting/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
eval_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        with_label=False),
    dict(type='Collect3D', keys=['points'])
]
optimizer = dict(type='AdamW', lr=0, weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=10, norm_type=2))
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=50,
    warmup_ratio=0.3333333333333333,
    step=[1])
total_epochs = 1
runner = dict(type='EpochBasedRunner', max_epochs=1)
find_unused_parameters = False
gpu_ids = range(0, 1)

INFO:mmdet:Config:
checkpoint_config = dict(interval=1)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
work_dir = './work_dirs/htc_r50_fpn_painting2'
load_from = 'https://download.openmmlab.com/mmdetection3d/v0.1.0_models/nuimages_semseg/htc_r50_fpn_coco-20e_20e_nuim/htc_r50_fpn_coco-20e_20e_nuim_20201008_211415-d6c60a2c.pth'
resume_from = None
workflow = [('val', 1)]
point_cloud_range = [-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]
class_names = [
    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
]
dataset_type = 'NuScenesDatasetv2'
data_root = 'data/nuscenes/'
input_modality = dict(
    use_lidar=True,
    use_camera=True,
    use_radar=False,
    use_map=False,
    use_external=False)
file_client_args = dict(backend='disk')
train_pipeline = [
    dict(
        type='LoadPointsFromFilev2',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(type='LoadMultiViewImageFromFilesv2'),
    dict(
        type='LoadPointsFromMultiSweepsv2',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
    dict(
        type='Normalize3D',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad3Dv2', size_divisor=32),
    dict(
        type='DefaultFormatBundle3Dv2',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        with_gt=False),
    dict(
        type='Collect3Dv2',
        keys=['points', 'img', 'sweep_points', 'pts_metas'])
]
test_pipeline = [
    dict(
        type='LoadPointsFromFilev2',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(type='LoadMultiViewImageFromFiles'),
    dict(
        type='LoadPointsFromMultiSweepsv2',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(
        type='Normalize3D',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad3D', size_divisor=32),
    dict(
        type='MultiScaleFlipAug3D',
        img_scale=(1333, 800),
        pts_scale_ratio=1,
        flip=False,
        transforms=[
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ],
                with_label=False),
            dict(type='Collect3D', keys=['points', 'img'])
        ])
]
data = dict(
    samples_per_gpu=1,
    workers_per_gpu=4,
    train=dict(
        type='NuScenesDatasetv2',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_train.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFilev2',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(type='LoadMultiViewImageFromFilesv2'),
            dict(
                type='LoadPointsFromMultiSweepsv2',
                sweeps_num=9,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk'),
                pad_empty_sweeps=True,
                remove_close=True),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                type='Normalize3D',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad3Dv2', size_divisor=32),
            dict(
                type='DefaultFormatBundle3Dv2',
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ],
                with_gt=False),
            dict(
                type='Collect3Dv2',
                keys=['points', 'img', 'sweep_points', 'pts_metas'])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=False,
        box_type_3d='LiDAR',
        use_valid_flag=True),
    val=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFilev2',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(type='LoadMultiViewImageFromFiles'),
            dict(
                type='LoadPointsFromMultiSweepsv2',
                sweeps_num=9,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk'),
                pad_empty_sweeps=True,
                remove_close=True),
            dict(
                type='Normalize3D',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad3D', size_divisor=32),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(type='Collect3D', keys=['points', 'img'])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'),
    test=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFilev2',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(type='LoadMultiViewImageFromFiles'),
            dict(
                type='LoadPointsFromMultiSweepsv2',
                sweeps_num=9,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk'),
                pad_empty_sweeps=True,
                remove_close=True),
            dict(
                type='Normalize3D',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad3D', size_divisor=32),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(type='Collect3D', keys=['points', 'img'])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'))
evaluation = dict(
    interval=1,
    pipeline=[
        dict(
            type='LoadPointsFromFile',
            coord_type='LIDAR',
            load_dim=5,
            use_dim=5,
            file_client_args=dict(backend='disk')),
        dict(
            type='LoadPointsFromMultiSweeps',
            sweeps_num=9,
            use_dim=[0, 1, 2, 3, 4],
            file_client_args=dict(backend='disk'),
            pad_empty_sweeps=True,
            remove_close=True),
        dict(
            type='DefaultFormatBundle3D',
            class_names=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            with_label=False),
        dict(type='Collect3D', keys=['points'])
    ])
model = dict(
    type='HybridTaskCascadePainting',
    pretrained='torchvision://resnet50',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch'),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='HybridTaskCascadeRoIHeadPainting',
        interleaved=True,
        mask_info_flow=True,
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
        ],
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_head=[
            dict(
                type='HTCMaskHead',
                with_conv_res=False,
                num_convs=4,
                in_channels=256,
                conv_out_channels=256,
                num_classes=10,
                loss_mask=dict(
                    type='CrossEntropyLoss', use_mask=True, loss_weight=1.0)),
            dict(
                type='HTCMaskHead',
                num_convs=4,
                in_channels=256,
                conv_out_channels=256,
                num_classes=10,
                loss_mask=dict(
                    type='CrossEntropyLoss', use_mask=True, loss_weight=1.0)),
            dict(
                type='HTCMaskHead',
                num_convs=4,
                in_channels=256,
                conv_out_channels=256,
                num_classes=10,
                loss_mask=dict(
                    type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))
        ],
        semantic_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[8]),
        semantic_head=dict(
            type='FusedSemanticHead',
            num_ins=5,
            fusion_level=1,
            num_convs=4,
            in_channels=256,
            conv_out_channels=256,
            num_classes=32,
            ignore_label=0,
            loss_weight=0.2)),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_across_levels=False,
            nms_pre=2000,
            nms_post=2000,
            max_num=2000,
            nms_thr=0.7,
            min_bbox_size=0),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_across_levels=False,
            nms_pre=1000,
            nms_post=1000,
            max_num=1000,
            nms_thr=0.7,
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.1,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
plugin = True
plugin_dir = 'plugin/pointpainting/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
eval_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        with_label=False),
    dict(type='Collect3D', keys=['points'])
]
optimizer = dict(type='AdamW', lr=0, weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=10, norm_type=2))
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=50,
    warmup_ratio=0.3333333333333333,
    step=[1])
total_epochs = 1
runner = dict(type='EpochBasedRunner', max_epochs=1)
find_unused_parameters = False
gpu_ids = range(0, 1)

2021-09-15 12:23:59,334 - mmdet - INFO - Set random seed to 0, deterministic: False
INFO:mmdet:Set random seed to 0, deterministic: False
/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmdet/models/backbones/resnet.py:400: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
2021-09-15 12:24:00,229 - mmdet - INFO - Model:
HybridTaskCascadePainting(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Pretrained', 'checkpoint': 'torchvision://resnet50'}
  (neck): FPN(
    (lateral_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ConvModule(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): ConvModule(
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): ConvModule(
        (conv): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (fpn_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (1): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (2): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (3): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
  init_cfg={'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
  (rpn_head): RPNHead(
    (loss_cls): CrossEntropyLoss()
    (loss_bbox): SmoothL1Loss()
    (rpn_conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (rpn_cls): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
    (rpn_reg): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
  )
  init_cfg={'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
  (roi_head): HybridTaskCascadeRoIHeadPainting(
    (bbox_roi_extractor): ModuleList(
      (0): SingleRoIExtractor(
        (roi_layers): ModuleList(
          (0): RoIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (1): RoIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (2): RoIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (3): RoIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
        )
      )
      (1): SingleRoIExtractor(
        (roi_layers): ModuleList(
          (0): RoIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (1): RoIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (2): RoIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (3): RoIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
        )
      )
      (2): SingleRoIExtractor(
        (roi_layers): ModuleList(
          (0): RoIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (1): RoIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (2): RoIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (3): RoIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
        )
      )
    )
    (bbox_head): ModuleList(
      (0): Shared2FCBBoxHead(
        (loss_cls): CrossEntropyLoss()
        (loss_bbox): SmoothL1Loss()
        (fc_cls): Linear(in_features=1024, out_features=11, bias=True)
        (fc_reg): Linear(in_features=1024, out_features=4, bias=True)
        (shared_convs): ModuleList()
        (shared_fcs): ModuleList(
          (0): Linear(in_features=12544, out_features=1024, bias=True)
          (1): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (cls_convs): ModuleList()
        (cls_fcs): ModuleList()
        (reg_convs): ModuleList()
        (reg_fcs): ModuleList()
        (relu): ReLU(inplace=True)
      )
      init_cfg=[{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
      (1): Shared2FCBBoxHead(
        (loss_cls): CrossEntropyLoss()
        (loss_bbox): SmoothL1Loss()
        (fc_cls): Linear(in_features=1024, out_features=11, bias=True)
        (fc_reg): Linear(in_features=1024, out_features=4, bias=True)
        (shared_convs): ModuleList()
        (shared_fcs): ModuleList(
          (0): Linear(in_features=12544, out_features=1024, bias=True)
          (1): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (cls_convs): ModuleList()
        (cls_fcs): ModuleList()
        (reg_convs): ModuleList()
        (reg_fcs): ModuleList()
        (relu): ReLU(inplace=True)
      )
      init_cfg=[{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
      (2): Shared2FCBBoxHead(
        (loss_cls): CrossEntropyLoss()
        (loss_bbox): SmoothL1Loss()
        (fc_cls): Linear(in_features=1024, out_features=11, bias=True)
        (fc_reg): Linear(in_features=1024, out_features=4, bias=True)
        (shared_convs): ModuleList()
        (shared_fcs): ModuleList(
          (0): Linear(in_features=12544, out_features=1024, bias=True)
          (1): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (cls_convs): ModuleList()
        (cls_fcs): ModuleList()
        (reg_convs): ModuleList()
        (reg_fcs): ModuleList()
        (relu): ReLU(inplace=True)
      )
      init_cfg=[{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
    )
    (mask_head): ModuleList(
      (0): HTCMaskHead(
        (loss_mask): CrossEntropyLoss()
        (convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
          (2): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
          (3): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
        )
        (upsample): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
        (conv_logits): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
        (relu): ReLU(inplace=True)
      )
      (1): HTCMaskHead(
        (loss_mask): CrossEntropyLoss()
        (convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
          (2): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
          (3): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
        )
        (upsample): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
        (conv_logits): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
        (relu): ReLU(inplace=True)
        (conv_res): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU(inplace=True)
        )
      )
      (2): HTCMaskHead(
        (loss_mask): CrossEntropyLoss()
        (convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
          (2): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
          (3): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
        )
        (upsample): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
        (conv_logits): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
        (relu): ReLU(inplace=True)
        (conv_res): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU(inplace=True)
        )
      )
    )
    (mask_roi_extractor): ModuleList(
      (0): SingleRoIExtractor(
        (roi_layers): ModuleList(
          (0): RoIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (1): RoIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (2): RoIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (3): RoIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
        )
      )
      (1): SingleRoIExtractor(
        (roi_layers): ModuleList(
          (0): RoIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (1): RoIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (2): RoIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (3): RoIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
        )
      )
      (2): SingleRoIExtractor(
        (roi_layers): ModuleList(
          (0): RoIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (1): RoIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (2): RoIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (3): RoIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
        )
      )
    )
    (semantic_roi_extractor): SingleRoIExtractor(
      (roi_layers): ModuleList(
        (0): RoIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
      )
    )
    (semantic_head): FusedSemanticHead(
      (lateral_convs): ModuleList(
        (0): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU()
        )
        (1): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU()
        )
        (2): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU()
        )
        (3): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU()
        )
        (4): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU()
        )
      )
      (convs): ModuleList(
        (0): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (activate): ReLU(inplace=True)
        )
        (1): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (activate): ReLU(inplace=True)
        )
        (2): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (activate): ReLU(inplace=True)
        )
        (3): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (activate): ReLU(inplace=True)
        )
      )
      (conv_embedding): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        (activate): ReLU(inplace=True)
      )
      (conv_logits): Conv2d(256, 32, kernel_size=(1, 1), stride=(1, 1))
      (criterion): CrossEntropyLoss()
    )
    init_cfg={'type': 'Kaiming', 'override': {'name': 'conv_logits'}}
  )
)
INFO:mmdet:Model:
HybridTaskCascadePainting(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Pretrained', 'checkpoint': 'torchvision://resnet50'}
  (neck): FPN(
    (lateral_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ConvModule(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): ConvModule(
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): ConvModule(
        (conv): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (fpn_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (1): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (2): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (3): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
  init_cfg={'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
  (rpn_head): RPNHead(
    (loss_cls): CrossEntropyLoss()
    (loss_bbox): SmoothL1Loss()
    (rpn_conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (rpn_cls): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
    (rpn_reg): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
  )
  init_cfg={'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
  (roi_head): HybridTaskCascadeRoIHeadPainting(
    (bbox_roi_extractor): ModuleList(
      (0): SingleRoIExtractor(
        (roi_layers): ModuleList(
          (0): RoIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (1): RoIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (2): RoIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (3): RoIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
        )
      )
      (1): SingleRoIExtractor(
        (roi_layers): ModuleList(
          (0): RoIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (1): RoIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (2): RoIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (3): RoIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
        )
      )
      (2): SingleRoIExtractor(
        (roi_layers): ModuleList(
          (0): RoIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (1): RoIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (2): RoIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (3): RoIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
        )
      )
    )
    (bbox_head): ModuleList(
      (0): Shared2FCBBoxHead(
        (loss_cls): CrossEntropyLoss()
        (loss_bbox): SmoothL1Loss()
        (fc_cls): Linear(in_features=1024, out_features=11, bias=True)
        (fc_reg): Linear(in_features=1024, out_features=4, bias=True)
        (shared_convs): ModuleList()
        (shared_fcs): ModuleList(
          (0): Linear(in_features=12544, out_features=1024, bias=True)
          (1): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (cls_convs): ModuleList()
        (cls_fcs): ModuleList()
        (reg_convs): ModuleList()
        (reg_fcs): ModuleList()
        (relu): ReLU(inplace=True)
      )
      init_cfg=[{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
      (1): Shared2FCBBoxHead(
        (loss_cls): CrossEntropyLoss()
        (loss_bbox): SmoothL1Loss()
        (fc_cls): Linear(in_features=1024, out_features=11, bias=True)
        (fc_reg): Linear(in_features=1024, out_features=4, bias=True)
        (shared_convs): ModuleList()
        (shared_fcs): ModuleList(
          (0): Linear(in_features=12544, out_features=1024, bias=True)
          (1): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (cls_convs): ModuleList()
        (cls_fcs): ModuleList()
        (reg_convs): ModuleList()
        (reg_fcs): ModuleList()
        (relu): ReLU(inplace=True)
      )
      init_cfg=[{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
      (2): Shared2FCBBoxHead(
        (loss_cls): CrossEntropyLoss()
        (loss_bbox): SmoothL1Loss()
        (fc_cls): Linear(in_features=1024, out_features=11, bias=True)
        (fc_reg): Linear(in_features=1024, out_features=4, bias=True)
        (shared_convs): ModuleList()
        (shared_fcs): ModuleList(
          (0): Linear(in_features=12544, out_features=1024, bias=True)
          (1): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (cls_convs): ModuleList()
        (cls_fcs): ModuleList()
        (reg_convs): ModuleList()
        (reg_fcs): ModuleList()
        (relu): ReLU(inplace=True)
      )
      init_cfg=[{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
    )
    (mask_head): ModuleList(
      (0): HTCMaskHead(
        (loss_mask): CrossEntropyLoss()
        (convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
          (2): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
          (3): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
        )
        (upsample): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
        (conv_logits): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
        (relu): ReLU(inplace=True)
      )
      (1): HTCMaskHead(
        (loss_mask): CrossEntropyLoss()
        (convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
          (2): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
          (3): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
        )
        (upsample): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
        (conv_logits): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
        (relu): ReLU(inplace=True)
        (conv_res): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU(inplace=True)
        )
      )
      (2): HTCMaskHead(
        (loss_mask): CrossEntropyLoss()
        (convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
          (2): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
          (3): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activate): ReLU(inplace=True)
          )
        )
        (upsample): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
        (conv_logits): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
        (relu): ReLU(inplace=True)
        (conv_res): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU(inplace=True)
        )
      )
    )
    (mask_roi_extractor): ModuleList(
      (0): SingleRoIExtractor(
        (roi_layers): ModuleList(
          (0): RoIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (1): RoIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (2): RoIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (3): RoIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
        )
      )
      (1): SingleRoIExtractor(
        (roi_layers): ModuleList(
          (0): RoIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (1): RoIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (2): RoIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (3): RoIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
        )
      )
      (2): SingleRoIExtractor(
        (roi_layers): ModuleList(
          (0): RoIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (1): RoIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (2): RoIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
          (3): RoIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
        )
      )
    )
    (semantic_roi_extractor): SingleRoIExtractor(
      (roi_layers): ModuleList(
        (0): RoIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, pool_mode=avg, aligned=True, use_torchvision=False)
      )
    )
    (semantic_head): FusedSemanticHead(
      (lateral_convs): ModuleList(
        (0): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU()
        )
        (1): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU()
        )
        (2): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU()
        )
        (3): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU()
        )
        (4): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU()
        )
      )
      (convs): ModuleList(
        (0): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (activate): ReLU(inplace=True)
        )
        (1): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (activate): ReLU(inplace=True)
        )
        (2): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (activate): ReLU(inplace=True)
        )
        (3): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (activate): ReLU(inplace=True)
        )
      )
      (conv_embedding): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        (activate): ReLU(inplace=True)
      )
      (conv_logits): Conv2d(256, 32, kernel_size=(1, 1), stride=(1, 1))
      (criterion): CrossEntropyLoss()
    )
    init_cfg={'type': 'Kaiming', 'override': {'name': 'conv_logits'}}
  )
)
2021-09-15 12:24:20,638 - mmdet - INFO - load checkpoint from https://download.openmmlab.com/mmdetection3d/v0.1.0_models/nuimages_semseg/htc_r50_fpn_coco-20e_20e_nuim/htc_r50_fpn_coco-20e_20e_nuim_20201008_211415-d6c60a2c.pth
INFO:mmdet:load checkpoint from https://download.openmmlab.com/mmdetection3d/v0.1.0_models/nuimages_semseg/htc_r50_fpn_coco-20e_20e_nuim/htc_r50_fpn_coco-20e_20e_nuim_20201008_211415-d6c60a2c.pth
2021-09-15 12:24:20,639 - mmdet - INFO - Use load_from_http loader
INFO:mmdet:Use load_from_http loader
2021-09-15 12:24:21,734 - mmdet - INFO - Start running, host: chenxy@node45, work_dir: /home/chenxy/mmdetection3d/work_dirs/htc_r50_fpn_painting2
INFO:mmdet:Start running, host: chenxy@node45, work_dir: /home/chenxy/mmdetection3d/work_dirs/htc_r50_fpn_painting2
2021-09-15 12:24:21,735 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
INFO:mmdet:Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2021-09-15 12:24:21,735 - mmdet - INFO - workflow: [('val', 1)], max: 1 epochs
INFO:mmdet:workflow: [('val', 1)], max: 1 epochs
2021-09-15 12:24:22.122384: I tensorflow/stream_executor/platform/default/dso_loader.cc:49] Successfully opened dynamic library libcudart.so.11.0
Traceback (most recent call last):
  File "tools/train.py", line 242, in <module>
    main()
  File "tools/train.py", line 231, in main
    train_detector(
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmdet/apis/train.py", line 170, in train_detector
    runner.run(data_loaders, cfg.workflow)
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/runner/epoch_based_runner.py", line 127, in run
    epoch_runner(data_loaders[i], **kwargs)
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/runner/epoch_based_runner.py", line 64, in val
    for i, data_batch in enumerate(self.data_loader):
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 517, in __next__
    data = self._next_data()
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 1199, in _next_data
    return self._process_data(data)
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 1225, in _process_data
    data.reraise()
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/torch/_utils.py", line 429, in reraise
    raise self.exc_type(msg)
RecursionError: Caught RecursionError in DataLoader worker process 0.
Original Traceback (most recent call last):
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/torch/utils/data/_utils/worker.py", line 202, in _worker_loop
    data = fetcher.fetch(index)
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/torch/utils/data/_utils/fetch.py", line 47, in fetch
    return self.collate_fn(data)
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 79, in collate
    return {
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 80, in <dictcomp>
    key: collate([d[key] for d in batch], samples_per_gpu)
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 79, in collate
    return {
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 80, in <dictcomp>
    key: collate([d[key] for d in batch], samples_per_gpu)
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in collate
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 77, in <listcomp>
    return [collate(samples, samples_per_gpu) for samples in transposed]
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/mmcv/parallel/collate.py", line 23, in collate
    if not isinstance(batch, Sequence):
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/abc.py", line 98, in __instancecheck__
    return _abc_instancecheck(cls, instance)
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/abc.py", line 102, in __subclasscheck__
    return _abc_subclasscheck(cls, subclass)
RecursionError: maximum recursion depth exceeded in comparison

Traceback (most recent call last):
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/torch/distributed/launch.py", line 340, in <module>
    main()
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/torch/distributed/launch.py", line 326, in main
    sigkill_handler(signal.SIGTERM, None)  # not coming back
  File "/home/chenxy/anaconda3/envs/open-mmlab/lib/python3.8/site-packages/torch/distributed/launch.py", line 301, in sigkill_handler
    raise subprocess.CalledProcessError(returncode=last_return_code, cmd=cmd)
subprocess.CalledProcessError: Command '['/home/chenxy/anaconda3/envs/open-mmlab/bin/python3', '-u', 'tools/train.py', '--local_rank=0', 'plugin/pointpainting/configs/htc_r50_fpn_painting2.py', '--launcher', 'pytorch']' returned non-zero exit status 1.
